// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  thumbnail String?
  title     String
  slug      String   @unique
  content   String?
  status    String   @default("draft")
  tags      String[] @default([])

  type String @default("post")

  // If Event (Live Stream)
  startDate DateTime?
  endDate   DateTime?
  youtubeId String?
  slidoId   String?

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?

  keyPost String? @unique

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  stream Stream?

  @@map("posts")
}

model Stream {
  id     Int  @id @default(autoincrement())
  postId Int  @unique
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime
  youtubeId String
  slidoId   String

  key String? @unique

  // Contributors | Actors
  users UserStream[]

  @@map("streams")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@map("categories")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  posts Post[]

  streams UserStream[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("roles")
}

model UserStream {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  streamId Int
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  role String

  @@map("user_streams")
}
